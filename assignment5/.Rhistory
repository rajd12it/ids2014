MyData <- read.csv("/home/user/datasci_course_materials/assignment5/seaflow_21min.csv", header=TRUE, sep=",")
summary(MyData)
sample(MyData)
clear
sample(MyData) > sample.txt
createDataPartition(MyData)
inTrainingSet <- createDataPartition(myData$pop,p = 0.5,list=FALSE)
library(caret)
inTrainingSet <- createDataPartition(myData$pop,p = 0.5,list=FALSE)
inTrainingSet <- createDataPartition(MyData$pop,p = 0.5,list=FALSE)
training <- MyData[inTrainingSet,]
testing <- MyData[-inTrainingSet,]
summary(training)
p <- ggplot(MyData, aes(x = chl_small, y = pe ) )
p + geom_line(aes(colour = pop))
ggplot(aes(x=chl_small,y=pe,color=pop),data=myData)+geom_jitter()
ggplot(aes(x=chl_small,y=pe,color=pop),data=myData)+geom_jitter()
ggplot(aes(x=chl_small,y=pe,color=pop),data=MyData)+geom_jitter()
exit
bye
q
quit
quit save=yes
q(yes)
quit(yes)
quit(y)
q()
q()
MyData <- read.csv("/home/user/datasci_course_materials/assignment5/seaflow_21min.csv", header=TRUE, sep=",")
summary(MyData)
library(caret)
partition <- createDataPartition(MyData$pop,p = 0.5,list=FALSE)
training <- MyData[partition,]
testing <- MyData[-partition,]
summary(training)
plot <- ggplot(MyData, aes(x = chl_small, y = pe ) )
plot + geom_line(aes(colour = pop))
ggplot(aes(x=chl_small,y=pe,color=pop),data=MyData)+geom_jitter()
library(rpart)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
modelA <- rpart(fol, method="class", data=training)
print(modelA)
library(partykit)
library(partykit)
rpartA <- as.party(modelA)
plot(rpartA)
library(rpart.plot)
library(rpart.plot)
rpart.plot(modelA,branch=0,branch.type=2,type=1,extra=102,shadow.col="pink",box.col="gray",split.col="magenta")
rpart.plot(modelA,branch=0,branch.type=2,type=1,extra=102,shadow.col="pink",box.col="green",split.col="red")
plot(rpartA)
rpart.plot(modelA,branch=0,branch.type=2,type=1,extra=102,shadow.col="pink",box.col="gray",split.col="magenta")
plot(rpartA)
rpart.plot(modelA,branch=0,branch.type=2,type=1,extra=102,shadow.col="pink",box.col="gray",split.col="magenta")
plot(rpartA)
predictA=predict(modelA,newdata=testing)
str(predictA)
pop_testA=c()
pop_names=c("crypto","nano","pico","synecho","ultra")
for (i in 1:nrow(predictA)){
        pop_testA=c(pop_testA,pop_names[which.max(predictA[i,])])
        } 
resultA=as.vector(testing$pop)==pop_testA
table(resultA)
accuracyA=sum(resultA)/length(pop_testA)
predictA2=predict(modelA,newdata=testing,type= "class")
table(predictA2, testing$pop)
confusionMatrix(predictA2, testing$pop)
library(randomForest)
modelB <- randomForest(fol, data=training)
predictB=predict(modelB,newdata=testing)
str(predictB)
pop_testB=c()
pop_names=c("crypto","nano","pico","synecho","ultra")
for (i in 1:nrow(predictB)){
        pop_testB=c(pop_testB,pop_names[which.max(predictB[i,])])
        } 
resultB=as.vector(testing$pop)==pop_testB
table(resultB)
accuracyB=sum(resultB)/length(pop_testB)
predictB2=predict(modelB,newdata=testing,type= "class")
table(predictB2, testing$pop)
confusionMatrix(predictB2, testing$pop)
importance(modelB)
library(e1071)
model_svm <- svm(fol, data=training)
predictC=predict(model_svm,newdata=testing)
str(predictC)
pop_testC=c()
pop_names=c("crypto","nano","pico","synecho","ultra")
for (i in 1:nrow(predictC)){
        pop_testC=c(pop_testC,pop_names[which.max(predictC[i,])])
       }
resultC=as.vector(testing$pop)==pop_testC
table(resultC)
accuracyC=sum(resultC)/length(pop_testC)
predictC2=predict(model_svm,newdata=testing,type= "class")
table(predictC2, testing$pop)
confusionMatrix(predictC2, testing$pop)
importance(model_svm)
model_svm <- randomForest(fol, data=trainingdata)
library(ggplot2)
p13 <- ggplot(MyData, aes(x = time , y = fsc_big ) )
p13 + geom_jitter(aes(color=pop))
ggplot(aes(x=time,y=pe,color=pop),data=MyData)+geom_jitter()
library(e1071)
MyDataFilted<- subset(MyData,file_id != 208)
set.seed(3456)
inTrainingSet <- createDataPartition(MyDataFilted$pop,p = 0.5,list=FALSE)
training <- MyDataFilted[inTrainingSet,]
testing <- MyDataFilted[-inTrainingSet,]
summary(training)
model_svm <- svm(fol, data=training)
predict_11c=predict(model_svm,newdata=testing,type= "class")
table(predict_11c, testing$pop)
confusionMatrix(predict_11c, testing$pop)
q(y)
q90
q()
MyData <- read.csv("/home/user/datasci_course_materials/assignment5/seaflow_21min.csv", header=TRUE, sep=",")
summary(MyData)
library(caret)
partition <- createDataPartition(MyData$pop,p = 0.5,list=FALSE)
training <- MyData[partition,]
testing <- MyData[-partition,]
summary(training)
plot <- ggplot(MyData, aes(x = chl_small, y = pe ) )
plot + geom_line(aes(colour = pop))
ggplot(aes(x=chl_small,y=pe,color=pop),data=MyData)+geom_jitter()
q()
